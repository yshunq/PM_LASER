C51 COMPILER V9.00   XS_SET_PULSE                                                          08/28/2024 17:05:54 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE XS_SET_PULSE
OBJECT MODULE PLACED IN ..\hex\XS_set_pulse.obj
COMPILER INVOKED BY: C:\Keil _C51\C51\BIN\C51.EXE ..\main\XS_set_pulse.c LARGE BROWSE INCDIR(..\user;..\common;..\displa
                    -y) DEBUG OBJECTEXTEND PRINT(.\LIST\XS_set_pulse.lst) OBJECT(..\hex\XS_set_pulse.obj)

line level    source

   1          //#include "config.h"
   2          //
   3          //const u8  code MAIN_KEY_SET_PULSE = 6;
   4          //const u16 code MAIN_SET_PULSE[]=
   5          //{
   6          //      0, 130,  0,130,
   7          //      1775,1915,0,125,
   8          //      
   9          //      806,878,369,441,
  10          //      1041,1113,369,441,
  11          //      
  12          //      806,878,560,632,
  13          //      1041,1113,560,632,      
  14          //};
  15          //
  16          //void dis_set_pulse_fast_pulse_time(void);
  17          //void dis_set_pulse_normal_pulse_time(void);
  18          //
  19          //void main_xs_set_pulse(void)
  20          //{
  21          //      u8 key;
  22          //      DIS_PICNUM(Pic_SET_PULSE);
  23          //      read_fast_pulse_time();
  24          //      read_normal_pulse_time();
  25          //      dis_set_pulse_fast_pulse_time();
  26          //      dis_set_pulse_normal_pulse_time();
  27          //      do{
  28          //              delay_ms(1);
  29          //              if(KEY_YES!=0x00)
  30          //              {
  31          //                      ADS7843_KEY(); //扫描按键
  32          //                      key=KEY_FANHUI(MAIN_KEY_SET_PULSE,MAIN_SET_PULSE); 
  33          //                      switch(key)
  34          //                      {
  35          //                              case 1:
  36          //                                  XIANG1();
  37          //                                  INTERFACE = PAGE_CHOOSE_MODE;
  38          //                                      goto over_main_xs_set_pulse;
  39          //                                      break;
  40          //                              case 2:
  41          //                                      if(FAST_PULSE_TIME != 10 || NORMAL_PULSE_TIME != 10){
  42          //                                              XIANG1();
  43          //                                              FAST_PULSE_TIME = 10;
  44          //                                              NORMAL_PULSE_TIME = 10;
  45          //                                              write_fast_pulse_time();
  46          //                                              write_normal_pulse_time();
  47          //                                              goto over_main_xs_set_pulse;
  48          //                                      }KEY_YES = 0;
  49          //                                      break;
  50          //                              case 3:
  51          //                                      if(FAST_PULSE_TIME > 10){
  52          //                                              XIANG1();
  53          //                                              FAST_PULSE_TIME--;
  54          //                                              write_fast_pulse_time();
C51 COMPILER V9.00   XS_SET_PULSE                                                          08/28/2024 17:05:54 PAGE 2   

  55          //                                              dis_set_pulse_fast_pulse_time();
  56          //                                              delay_ms(50);
  57          //                                      }else{KEY_YES=0;}
  58          //                                      break;
  59          //                              case 4:
  60          //                                      if(FAST_PULSE_TIME < 100){
  61          //                                              XIANG1();
  62          //                                              FAST_PULSE_TIME++;
  63          //                                              write_fast_pulse_time();
  64          //                                              dis_set_pulse_fast_pulse_time();
  65          //                                              delay_ms(50);
  66          //                                      }else{KEY_YES=0;}
  67          //                                      break;
  68          //                              case 5:
  69          //                                      if(NORMAL_PULSE_TIME > 10){
  70          //                                              XIANG1();
  71          //                                              NORMAL_PULSE_TIME--;
  72          //                                              write_normal_pulse_time();
  73          //                                              dis_set_pulse_normal_pulse_time();
  74          //                                              delay_ms(50);
  75          //                                      }else{KEY_YES=0;}
  76          //                                      break;
  77          //                              case 6:
  78          //                                      if(NORMAL_PULSE_TIME < 100){
  79          //                                              XIANG1();
  80          //                                              NORMAL_PULSE_TIME++;
  81          //                                              write_normal_pulse_time();
  82          //                                              dis_set_pulse_normal_pulse_time();
  83          //                                              delay_ms(50);
  84          //                                      }else{KEY_YES=0;}
  85          //                                      break; 
  86          //                      }
  87          //              }
  88          //
  89          //              WATER_TEMP = Get_ADC_RES_WATER_TEMP();//获取水温度
  90          //              if(WATER_TEMP != 255)
  91          //              {
  92          //                      if(WATER_TEMP >= WATER_COLD_UPPER_LIMITS)COLD_WATER_ON; //温度高了打开制冷
  93          //                      if(WATER_TEMP <= WATER_COLD_LOWER_LIMITS)COLD_WATER_OFF;//温度低了关闭制冷
  94          //              }else{COLD_WATER_OFF;}
  95          //              
  96          //              if(HANDLE_PROBE_TEMP != 255)//手柄温度
  97          //              {
  98          //                      if(HANDLE_PROBE_TEMP >= HANDLE_PROBE_COLD_UPPER_LIMITS[HANDLE_PROBE_COLE_GEAR])COLD_HANDLE_PROBE_ON;    
             -//温度高了打开制冷
  99          //                      if(HANDLE_PROBE_TEMP <= HANDLE_PROBE_COLD_LOWER_LIMITS[HANDLE_PROBE_COLE_GEAR])COLD_HANDLE_PROBE_OFF;
             -//温度低了关闭制冷
 100          //              }else{COLD_HANDLE_PROBE_OFF;}
 101          //
 102          //      }while(1);
 103          //      over_main_xs_set_pulse:
 104          //      _nop_();
 105          //}
 106          //
 107          //void dis_set_pulse_fast_pulse_time(void)
 108          //{
 109          //      DIS_FONT_WEI_NUMBER_CM(Pic_SET_PULSE,1,0x5C,0xF4,0x04,FAST_PULSE_TIME,3,928,385);
 110          //}
 111          // 
 112          //void dis_set_pulse_normal_pulse_time(void)
 113          //{
 114          //      DIS_FONT_WEI_NUMBER_CM(Pic_SET_PULSE,1,0x5C,0xF4,0x04,NORMAL_PULSE_TIME,3,928,575);
C51 COMPILER V9.00   XS_SET_PULSE                                                          08/28/2024 17:05:54 PAGE 3   

 115          //} 
 116          // 
 117          // 
 118          // 
 119          // 
 120          // 
 121          // 
 122          // 
 123          // 
 124          // 
 125          // 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
