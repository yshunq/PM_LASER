C51 COMPILER V9.00   XS_FLOW_SETTING                                                       08/14/2024 14:33:03 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE XS_FLOW_SETTING
OBJECT MODULE PLACED IN ..\hex\XS_flow_setting.obj
COMPILER INVOKED BY: C:\Keil _C51\C51\BIN\C51.EXE ..\main\XS_flow_setting.c LARGE BROWSE INCDIR(..\user;..\common;..\dis
                    -play) DEBUG OBJECTEXTEND PRINT(.\LIST\XS_flow_setting.lst) OBJECT(..\hex\XS_flow_setting.obj)

line level    source

   1          //#include "config.h"
   2          //
   3          //const u8  MAIN_KEY_FLOW_SETTING = 13;
   4          //const u16 MAIN_FLOW_SETTING[]=
   5          //{
   6          //      440,958,160,246,         //六个选项
   7          //      440,958,250,335,
   8          //      440,958,339,424,
   9          //      440,958,429,514,
  10          //      440,958,518,603,
  11          //      440,958,608,693,
  12          //
  13          //      0, 130,  0, 130,                 //返回和重置
  14          //      1775,1915,0,125,
  15          //      
  16          //      1113,1215,231,289,
  17          //
  18          //      1037,1097,387,448,
  19          //      1232,1293,387,448,
  20          //      1037,1097,547,607,
  21          //      1232,1293,547,607,
  22          //};
  23          //
  24          //void dis_warning_flow_rate(void);
  25          //void dis_flow_constant(void);
  26          //
  27          //void main_xs_flow_setting(void)
  28          //{
  29          //      u8 key;
  30          //      DIS_PICNUM(Pic_FLOW_SETTING);
  31          //      dis_flow_flag();
  32          //      dis_warning_flow_rate();
  33          //      dis_flow_constant();
  34          //      do{
  35          //              delay_ms(1);
  36          //              if(KEY_YES!=0x00)
  37          //              {
  38          //                      ADS7843_KEY(); //扫描按键
  39          //                      key=KEY_FANHUI(MAIN_KEY_FLOW_SETTING,MAIN_FLOW_SETTING); 
  40          //                      switch(key)
  41          //                      {
  42          //                              case 1:  //
  43          //                                      XIANG1();
  44          //                                INTERFACE = PAGE_LOGO_FLAG;
  45          //                                      goto over_main_xs_flow_setting;
  46          //                                      break;
  47          //                              case 2:  //
  48          //                                      XIANG1();
  49          //                                INTERFACE = PAGE_WATER_SETTING;
  50          //                                      goto over_main_xs_flow_setting;
  51          //                                      break;
  52          //                              case 3:  //
  53          //                                      XIANG1();
  54          //                                INTERFACE = PAGE_HANDLE_SETTING;
C51 COMPILER V9.00   XS_FLOW_SETTING                                                       08/14/2024 14:33:03 PAGE 2   

  55          //                                      goto over_main_xs_flow_setting;
  56          //                                      break;
  57          //                              case 4:  //
  58          //                                      //XIANG1();
  59          //                                //INTERFACE = PAGE_FLOW_SETTING;
  60          //                                      //goto over_main_xs_flow_setting;
  61          //                                      break; 
  62          //                              case 5:  //
  63          //                                      XIANG1();
  64          //                                INTERFACE = PAGE_TOTAL_TIME_SETTING;
  65          //                                      goto over_main_xs_flow_setting;
  66          //                                      break;
  67          //                              case 6:  //
  68          //                                      XIANG1();
  69          //                                INTERFACE = PAGE_SOUND_SETTING;
  70          //                                      goto over_main_xs_flow_setting;
  71          //                                      break;
  72          //                              case 7:  //
  73          //                                      XIANG1();
  74          //                                INTERFACE = PAGE_CHOOSE_MODE;
  75          //                                      goto over_main_xs_flow_setting;
  76          //                                      break;
  77          //                              case 8:  //
  78          //                                      if(FLOW_FLAG != 0 || WARNING_FLOW_RATE != 24 || FLOW_CONSTANT != 70)
  79          //                                      {
  80          //                                              XIANG1();
  81          //                                              FLOW_FLAG = 0;
  82          //                                              write_flow_flag();
  83          //
  84          //                                              WARNING_FLOW_RATE = 24;
  85          //                                              write_warning_flow_rate();
  86          //
  87          //                                              FLOW_CONSTANT = 70;
  88          //                                              write_flow_constant();
  89          //
  90          //                                              goto over_main_xs_flow_setting;
  91          //                                      }else{KEY_YES = 0;}
  92          //                                      break;
  93          //                              case 9:  //
  94          //                                      XIANG1();
  95          //                                      if(FLOW_FLAG == 0)FLOW_FLAG = 1;
  96          //                                      else{FLOW_FLAG = 0;}
  97          //                                      write_flow_flag();
  98          //                                      dis_flow_flag();
  99          //                                      KEY_YES = 0;
 100          //                                      break;
 101          //                              case 10:  //
 102          //                                      if(WARNING_FLOW_RATE > 0){
 103          //                                              XIANG1();
 104          //                                              WARNING_FLOW_RATE--;
 105          //                                              write_warning_flow_rate();
 106          //                                              dis_warning_flow_rate();
 107          //                                              delay_ms(50);
 108          //                                      }else{KEY_YES = 0;}
 109          //                                      break;
 110          //                               case 11:  //
 111          //                                      if(WARNING_FLOW_RATE < 50){
 112          //                                              XIANG1();
 113          //                                              WARNING_FLOW_RATE++;
 114          //                                              write_warning_flow_rate();
 115          //                                              dis_warning_flow_rate();
 116          //                                              delay_ms(50);
C51 COMPILER V9.00   XS_FLOW_SETTING                                                       08/14/2024 14:33:03 PAGE 3   

 117          //                                      }else{KEY_YES = 0;}
 118          //                                      break;
 119          //                               case 12:  //
 120          //                                      if(FLOW_CONSTANT > 1){
 121          //                                              XIANG1();
 122          //                                              FLOW_CONSTANT--;
 123          //                                              write_flow_constant();
 124          //                                              dis_flow_constant();
 125          //                                              delay_ms(50);
 126          //                                      }else{KEY_YES = 0;}
 127          //                                      break;
 128          //                                case 13:  //
 129          //                                      if(FLOW_CONSTANT < 250){
 130          //                                              XIANG1();
 131          //                                              FLOW_CONSTANT++;
 132          //                                              write_flow_constant();
 133          //                                              dis_flow_constant();
 134          //                                              delay_ms(50);
 135          //                                      }else{KEY_YES = 0;}
 136          //                                      break;
 137          //                              
 138          //                              
 139          //                              
 140          //                              
 141          //                      }
 142          //                      
 143          //              }
 144          //              
 145          //              WATER_TEMP = Get_ADC_RES_WATER_TEMP();//获取水温度
 146          //              if(WATER_TEMP != 255)
 147          //              {
 148          //                      if(WATER_TEMP >= WATER_COLD_UPPER_LIMITS)COLD_WATER_ON; //温度高了打开制冷
 149          //                      if(WATER_TEMP <= WATER_COLD_LOWER_LIMITS)COLD_WATER_OFF;//温度低了关闭制冷
 150          //              }else{COLD_WATER_OFF;}
 151          //              
 152          //              if(HANDLE_PROBE_TEMP != 255)//手柄温度
 153          //              {
 154          //                      if(HANDLE_PROBE_TEMP >= HANDLE_PROBE_COLD_UPPER_LIMITS[HANDLE_PROBE_COLE_GEAR])COLD_HANDLE_PROBE_ON;    
             -//温度高了打开制冷
 155          //                      if(HANDLE_PROBE_TEMP <= HANDLE_PROBE_COLD_LOWER_LIMITS[HANDLE_PROBE_COLE_GEAR])COLD_HANDLE_PROBE_OFF;
             -//温度低了关闭制冷
 156          //              }else{COLD_HANDLE_PROBE_OFF;}
 157          //              
 158          //      }while(1);
 159          //      over_main_xs_flow_setting:
 160          //      _nop_();
 161          //}
 162          //
 163          //void dis_flow_flag(void)
 164          //{
 165          //      u16 x,y;
 166          //      x = 1133;
 167          //      y = 241;
 168          //      DIS_DEL_DIS(Pic_FLOW_SETTING,1113,231,1215,289,1113,231);
 169          //      
 170          //      if(FLOW_FLAG == 0)DIS_FONT_C(0x5C,0xF4,2,0x04,x+10,y,"ON");
 171          //      else{DIS_FONT_C(0x5C,0xF4,3,0x04,x,y,"OFF");}
 172          //}
 173          //
 174          //void dis_warning_flow_rate(void)
 175          //{
 176          //      u16 x,y;
C51 COMPILER V9.00   XS_FLOW_SETTING                                                       08/14/2024 14:33:03 PAGE 4   

 177          //      x = 1135;
 178          //      y = 397;
 179          //
 180          //      DIS_FONT_WEI_NUMBER_CM(Pic_FLOW_SETTING,1,0x5C,0xF4,0x04,WARNING_FLOW_RATE/10,1,x,y);
 181          //      x += 20;
 182          //      DIS_FONT_C(0x5C,0xF4,1,0x04,x,y,".");
 183          //      x += 20;
 184          //      DIS_FONT_WEI_NUMBER_CM(Pic_FLOW_SETTING,1,0x5C,0xF4,0x04,WARNING_FLOW_RATE%10,1,x,y);
 185          //}
 186          //
 187          //void dis_flow_constant(void)
 188          //{
 189          //      DIS_FONT_WEI_NUMBER_CM(Pic_FLOW_SETTING,1,0x5C,0xF4,0x04,FLOW_CONSTANT,3,1133,558);
 190          //}
 191          //
 192          //
 193          //
 194          //
 195          //        
 196          //
 197          //
 198          //
 199          //
 200          //
 201          //
 202          //
 203          //
 204          //
 205          //
 206          //
 207          //
 208          //
 209          //
 210          // 
 211          // 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
